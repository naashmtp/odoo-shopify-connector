SHOPIFY DASHBOARD INTEGRATION GUIDE
====================================

This guide explains how to integrate the Shopify Dashboard widget into your Odoo views.

STRUCTURE
---------
static/
├── description/
│   ├── banner.png              # Module banner (1200x630)
│   ├── icon.png                # Module icon (256x256)
│   ├── index.html              # Module description page
│   └── README_IMAGES.txt       # Image creation guidelines
└── src/
    ├── css/
    │   └── shopify.css         # Dashboard styles
    ├── js/
    │   └── shopify_dashboard.js # OWL component
    └── xml/
        └── shopify_dashboard.xml # OWL template

FILES CREATED
-------------

1. shopify_dashboard.js (OWL Component - Odoo 16)
   - Modern OWL component using @odoo-module syntax
   - Real-time dashboard with auto-refresh (30s)
   - Stats cards for orders, products, customers, revenue
   - Instance management with sync buttons
   - Recent orders and logs display
   - Service injection: orm, action
   - State management with useState hook

2. shopify.css (Comprehensive Styles)
   - Responsive grid layouts
   - Stats cards with hover effects
   - Badge system for statuses
   - Loading states and animations
   - Log entry styling by level
   - Empty state designs
   - Mobile responsive (@media queries)

3. shopify_dashboard.xml (OWL Template)
   - Complete XML template with owl="1"
   - Conditional rendering (t-if/t-else)
   - Loop rendering (t-foreach)
   - Event handlers (t-on-click)
   - Dynamic classes (t-attf-class)
   - Expression evaluation (t-esc)

4. index.html (Module Description)
   - Professional landing page
   - Feature showcase
   - Installation steps
   - Technical specifications
   - Responsive design
   - Call-to-action sections

5. icon.png & banner.png
   - Generated placeholders
   - Replace with professional graphics for production

BACKEND INTEGRATION
-------------------

To use the dashboard, add these methods to your shopify.instance model:

```python
# In models/shopify_instance.py

def get_dashboard_stats(self):
    """Return dashboard statistics."""
    return {
        'total_orders': self.env['shopify.order'].search_count([]),
        'orders_today': self.env['shopify.order'].search_count([
            ('order_date', '>=', fields.Date.today())
        ]),
        'total_products': self.env['shopify.product'].search_count([]),
        'sync_products': self.env['shopify.product'].search_count([
            ('sync_state', '=', 'synced')
        ]),
        'total_customers': self.env['shopify.customer'].search_count([]),
        'pending_queue': self.env['shopify.queue'].search_count([
            ('state', '=', 'pending')
        ]),
        'failed_jobs': self.env['shopify.queue'].search_count([
            ('state', '=', 'failed')
        ]),
        'total_revenue': sum(
            self.env['shopify.order'].search([
                ('financial_status', '=', 'paid')
            ]).mapped('total_price')
        ),
    }

def action_sync_all(self):
    """Trigger full synchronization."""
    self.ensure_one()
    self.action_sync_products()
    self.action_sync_orders()
    self.action_sync_customers()
    return True
```

MENU INTEGRATION
----------------

Add dashboard action to views/menu_views.xml:

```xml
<!-- Dashboard Action -->
<record id="action_shopify_dashboard" model="ir.actions.client">
    <field name="name">Dashboard</field>
    <field name="tag">shopify_dashboard</field>
</record>

<!-- Menu Item -->
<menuitem id="menu_shopify_dashboard"
          name="Dashboard"
          parent="menu_shopify_root"
          action="action_shopify_dashboard"
          sequence="1"/>
```

WIDGET FEATURES
---------------

Auto-refresh:
- Dashboard refreshes every 30 seconds
- Automatically loads on mount
- Cleanup on unmount

Clickable Stats Cards:
- Orders card → Opens order list
- Products card → Opens product list
- Queue card → Opens pending jobs
- Logs card → Opens log viewer

Instance Cards:
- Shows all active instances
- Status badges (connected/disconnected)
- Sync button per instance
- Real-time status updates

Recent Activity:
- Last 10 orders with amounts
- Last 10 logs with levels
- Formatted dates and currencies
- Color-coded status badges

CUSTOMIZATION
-------------

Colors (in shopify.css):
- Primary green: #5cb85c
- Dark green: #4cae4c
- Dark blue: #2c3e50
- Gray: #7f8c8d

Change refresh interval (in shopify_dashboard.js):
```javascript
startAutoRefresh() {
    this.refreshInterval = setInterval(() => {
        this.loadDashboardData();
    }, 30000); // Change to desired milliseconds
}
```

Add more stats cards:
1. Add stat to backend get_dashboard_stats()
2. Add card in XML template
3. Style in CSS if needed

DEBUGGING
---------

Browser Console:
- Check for JavaScript errors
- Verify ORM calls are working
- Monitor network requests

Odoo Logs:
- Check for model method errors
- Verify permissions
- Check data availability

Common Issues:
- "Action not found" → Check action registry in JS
- Missing stats → Verify backend method exists
- Styling issues → Check CSS asset loading
- Template errors → Validate XML syntax

TESTING
-------

Manual Testing:
1. Install module
2. Go to Shopify > Dashboard menu
3. Check all stats display correctly
4. Click stats cards to verify navigation
5. Test sync buttons
6. Wait for auto-refresh
7. Check mobile responsive view

PERFORMANCE
-----------

Optimization tips:
- Dashboard queries are optimized with search_count
- Auto-refresh uses async calls
- Component unmounts cleanup intervals
- Minimal re-renders with useState
- Grid layouts use CSS Grid for performance

Database Indexes:
Ensure these fields are indexed:
- shopify.order: order_date, financial_status
- shopify.product: sync_state
- shopify.queue: state
- shopify.log: create_date, level

ACCESSIBILITY
-------------

- Semantic HTML structure
- Keyboard navigation support
- ARIA labels where needed
- Color contrast compliant
- Responsive for all devices

NEXT STEPS
----------

1. Test the dashboard in Odoo 16
2. Replace placeholder images with professional graphics
3. Add backend methods (get_dashboard_stats, action_sync_all)
4. Create menu entries
5. Test on mobile devices
6. Customize colors to match branding
7. Add more stats as needed
8. Configure auto-refresh interval

SUPPORT
-------

For issues or questions:
- Check Odoo logs for errors
- Verify all assets are loaded
- Test backend methods in Python shell
- Check browser console for JS errors
- Review this guide for integration steps